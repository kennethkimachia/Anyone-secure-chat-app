"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Anon = void 0;
const child_process_1 = require("child_process");
const config_1 = require("./config/config");
const utils_1 = require("./utils");
const chalk_1 = __importDefault(require("chalk"));
/**
 * Allows to run Anon client with different configuration options
 */
class Anon {
    constructor(options) {
        this.options = {
            displayLog: false,
            useExecFile: false,
            socksPort: 9050,
            orPort: 0,
            controlPort: 9051,
            binaryPath: undefined,
            autoTermsAgreement: false,
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
    /**
    * Retrieves the SOCKS port number configured for the Anon instance.
    *
    * @returns {number} The SOCKS port number.
    */
    getSOCKSPort() {
        return this.options.socksPort;
    }
    /**
     * Retrieves the Control port number configured for the Anon instance.
     *
     * @returns {number} The Control port number.
     */
    getControlPort() {
        return this.options.controlPort;
    }
    /**
     * Retrieves the OR (Onion Routing) port number configured for the Anon instance.
     *
     * @returns {number} The OR port number.
     */
    getORPort() {
        return this.options.orPort;
    }
    /**
     * Starts Anon client with options configured in constructor
     */
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (this.process !== undefined) {
                throw new Error('Anon process already started');
            }
            const configPath = yield (0, config_1.createAnonConfigFile)(this.options);
            const binaryPath = (_a = this.options.binaryPath) !== null && _a !== void 0 ? _a : (0, utils_1.getBinaryPath)('anon');
            this.process = this.runBinary(binaryPath, configPath, () => this.onStop());
        });
    }
    /**
     * Stops Anon client
     */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.process !== undefined) {
                this.process.kill('SIGTERM');
            }
        });
    }
    /**
     * Allows to check if Anon is running
     * @returns {boolean} true if Anon is running
     */
    isRunning() {
        return this.process !== undefined;
    }
    onStop() {
        this.process = undefined;
    }
    runBinary(binaryPath, configPath, onStop) {
        var _a;
        let args = [];
        if (configPath !== undefined) {
            args = ['-f', configPath];
        }
        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.useExecFile) === true) {
            const child = (0, child_process_1.execFile)(binaryPath, args);
            child.on('close', () => {
                if (onStop !== undefined) {
                    onStop();
                }
            });
            child.on('exit', () => {
                if (onStop !== undefined) {
                    onStop();
                }
            });
            return child;
        }
        const child = (0, child_process_1.spawn)(binaryPath, args, { detached: false });
        child.stdout.on('data', (data) => {
            var _a;
            const logLines = data.toString().split('\n');
            for (const line of logLines) {
                if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.displayLog) === true) {
                    console.log(line);
                }
                else {
                    const bootstrapMatch = line.match(/Bootstrapped (\d+)%.*?: (.+)/);
                    const versionMatch = line.match(/Anon (\d+\.\d+\.\d+[\w.-]+) .* running on/);
                    if (bootstrapMatch) {
                        const [, percentage, status] = bootstrapMatch;
                        const formattedPercentage = chalk_1.default.green(`${percentage}%`);
                        const formattedStatus = chalk_1.default.blue(status);
                        console.log(`Bootstrapped ${formattedPercentage}: ${formattedStatus}`);
                    }
                    else if (line.match(/\[err\]/i)) {
                        console.log(chalk_1.default.red(line));
                    }
                    else if (versionMatch) {
                        const [, version] = versionMatch;
                        console.log(chalk_1.default.yellow(`Running Anon version ${version} `));
                    }
                }
            }
        });
        child.stderr.on('data', (data) => {
            var _a;
            if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.displayLog) === true) {
                console.log(`${data}`);
            }
        });
        child.on('close', () => {
            if (onStop !== undefined) {
                onStop();
            }
        });
        child.on('exit', () => {
            if (onStop !== undefined) {
                onStop();
            }
        });
        return child;
    }
}
exports.Anon = Anon;
